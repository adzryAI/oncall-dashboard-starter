{"version":3,"sources":["../../src/lib/upgrade.ts"],"sourcesContent":["import debug from \"debug\";\nimport { transform, TransformErrors, getRelevantFiles } from \"./transform\";\nimport { TransformOptions } from \"./transform-options\";\nimport { SingleBar, Presets } from \"cli-progress\";\nimport installReactUILib from \"./install-ui-lib\";\nimport installEdgeLib from \"./install-edge-lib\";\nimport installAiSdkLib from \"./install-ai-sdk-lib\";\n\nconst bundle = [\n  \"v0-8/ui-package-split\",\n  \"v0-9/edge-package-split\",\n  \"v0-11/content-part-to-message-part\",\n];\n\nconst log = debug(\"codemod:upgrade\");\nconst error = debug(\"codemod:upgrade:error\");\n\n/**\n * Runs the upgrade cycle:\n *   - Runs each codemod in the bundle.\n *   - Displays progress using cli-progress.\n *   - After codemods run, checks if any file now imports from the new packages and prompts for install.\n */\nexport async function upgrade(options: TransformOptions) {\n  const cwd = process.cwd();\n  log(\"Starting upgrade...\");\n\n  // Find relevant files once to avoid duplicate work\n  console.log(\"Analyzing codebase...\");\n  const relevantFiles = getRelevantFiles(cwd);\n  const fileCount = relevantFiles.length;\n  console.log(`Found ${fileCount} files to process.`);\n\n  // Calculate total work units (files × codemods)\n  const totalWork = fileCount * bundle.length;\n  let completedWork = 0;\n\n  const bar = new SingleBar(\n    {\n      format: \"Progress |{bar}| {percentage}% | ETA: {eta}s || {status}\",\n      hideCursor: true,\n    },\n    Presets.shades_classic,\n  );\n\n  bar.start(totalWork, 0, { status: \"Starting...\" });\n  const allErrors: TransformErrors = [];\n\n  for (const codemod of bundle) {\n    bar.update(completedWork, { status: `Running ${codemod}...` });\n\n    // Use a custom progress callback to update the progress bar\n    const errors = transform(codemod, cwd, options, {\n      logStatus: false,\n      onProgress: (processedFiles: number) => {\n        completedWork = bundle.indexOf(codemod) * fileCount + processedFiles;\n        bar.update(Math.min(completedWork, totalWork), {\n          status: `Running ${codemod} (${processedFiles}/${fileCount} files)`,\n        });\n      },\n      relevantFiles, // Pass the pre-computed relevant files\n    });\n\n    allErrors.push(...errors);\n    completedWork = (bundle.indexOf(codemod) + 1) * fileCount;\n    bar.update(completedWork, { status: `Completed ${codemod}` });\n  }\n\n  bar.update(totalWork, { status: \"Checking dependencies...\" });\n  bar.stop();\n\n  if (allErrors.length > 0) {\n    log(\"Some codemods did not apply successfully to all files. Details:\");\n    allErrors.forEach(({ transform, filename, summary }) => {\n      error(`codemod=${transform}, path=${filename}, summary=${summary}`);\n    });\n  }\n\n  // After codemods run, check if files import from the new packages and prompt for install.\n  console.log(\"Checking for package dependencies...\");\n  await installReactUILib();\n  await installEdgeLib();\n  await installAiSdkLib();\n\n  log(\"Upgrade complete.\");\n  console.log(\"✅ Upgrade complete!\");\n}\n"],"mappings":";AAAA,OAAO,WAAW;AAClB,SAAS,WAA4B,wBAAwB;AAE7D,SAAS,WAAW,eAAe;AACnC,OAAO,uBAAuB;AAC9B,OAAO,oBAAoB;AAC3B,OAAO,qBAAqB;AAE5B,IAAM,SAAS;AAAA,EACb;AAAA,EACA;AAAA,EACA;AACF;AAEA,IAAM,MAAM,MAAM,iBAAiB;AACnC,IAAM,QAAQ,MAAM,uBAAuB;AAQ3C,eAAsB,QAAQ,SAA2B;AACvD,QAAM,MAAM,QAAQ,IAAI;AACxB,MAAI,qBAAqB;AAGzB,UAAQ,IAAI,uBAAuB;AACnC,QAAM,gBAAgB,iBAAiB,GAAG;AAC1C,QAAM,YAAY,cAAc;AAChC,UAAQ,IAAI,SAAS,SAAS,oBAAoB;AAGlD,QAAM,YAAY,YAAY,OAAO;AACrC,MAAI,gBAAgB;AAEpB,QAAM,MAAM,IAAI;AAAA,IACd;AAAA,MACE,QAAQ;AAAA,MACR,YAAY;AAAA,IACd;AAAA,IACA,QAAQ;AAAA,EACV;AAEA,MAAI,MAAM,WAAW,GAAG,EAAE,QAAQ,cAAc,CAAC;AACjD,QAAM,YAA6B,CAAC;AAEpC,aAAW,WAAW,QAAQ;AAC5B,QAAI,OAAO,eAAe,EAAE,QAAQ,WAAW,OAAO,MAAM,CAAC;AAG7D,UAAM,SAAS,UAAU,SAAS,KAAK,SAAS;AAAA,MAC9C,WAAW;AAAA,MACX,YAAY,CAAC,mBAA2B;AACtC,wBAAgB,OAAO,QAAQ,OAAO,IAAI,YAAY;AACtD,YAAI,OAAO,KAAK,IAAI,eAAe,SAAS,GAAG;AAAA,UAC7C,QAAQ,WAAW,OAAO,KAAK,cAAc,IAAI,SAAS;AAAA,QAC5D,CAAC;AAAA,MACH;AAAA,MACA;AAAA;AAAA,IACF,CAAC;AAED,cAAU,KAAK,GAAG,MAAM;AACxB,qBAAiB,OAAO,QAAQ,OAAO,IAAI,KAAK;AAChD,QAAI,OAAO,eAAe,EAAE,QAAQ,aAAa,OAAO,GAAG,CAAC;AAAA,EAC9D;AAEA,MAAI,OAAO,WAAW,EAAE,QAAQ,2BAA2B,CAAC;AAC5D,MAAI,KAAK;AAET,MAAI,UAAU,SAAS,GAAG;AACxB,QAAI,iEAAiE;AACrE,cAAU,QAAQ,CAAC,EAAE,WAAAA,YAAW,UAAU,QAAQ,MAAM;AACtD,YAAM,WAAWA,UAAS,UAAU,QAAQ,aAAa,OAAO,EAAE;AAAA,IACpE,CAAC;AAAA,EACH;AAGA,UAAQ,IAAI,sCAAsC;AAClD,QAAM,kBAAkB;AACxB,QAAM,eAAe;AACrB,QAAM,gBAAgB;AAEtB,MAAI,mBAAmB;AACvB,UAAQ,IAAI,0BAAqB;AACnC;","names":["transform"]}