{"version":3,"sources":["../../src/lib/transform.ts"],"sourcesContent":["import { execFileSync, spawnSync } from \"child_process\";\nimport debug from \"debug\";\nimport path from \"path\";\nimport { TransformOptions } from \"./transform-options\";\nimport { fileURLToPath } from \"url\";\nimport * as fs from \"fs\";\nimport { sync as globSync } from \"glob\";\n\nconst log = debug(\"codemod:transform\");\nconst error = debug(\"codemod:transform:error\");\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n/**\n * Gets the list of files that need to be processed in the codebase\n * Only includes files that contain \"assistant-ui\" to optimize performance\n */\nexport function getRelevantFiles(cwd: string): string[] {\n  const pattern = \"**/*.{js,jsx,ts,tsx}\";\n  const files = globSync(pattern, {\n    cwd,\n    ignore: [\n      \"**/node_modules/**\",\n      \"**/dist/**\",\n      \"**/build/**\",\n      \"**/*.min.js\",\n      \"**/*.bundle.js\",\n    ],\n  });\n\n  // Filter files to only include those containing \"assistant-ui\"\n  const relevantFiles = files.filter((file) => {\n    try {\n      const content = fs.readFileSync(path.join(cwd, file), \"utf8\");\n      return content.includes(\"assistant-ui\");\n    } catch {\n      return false;\n    }\n  });\n\n  return relevantFiles.map((file) => path.join(cwd, file));\n}\n\n/**\n * Counts the number of files that need to be processed\n */\nexport function countFilesToProcess(cwd: string): number {\n  return getRelevantFiles(cwd).length;\n}\n\nfunction buildCommand(\n  codemodPath: string,\n  targetFiles: string[],\n  options: TransformOptions,\n): string[] {\n  const command = [\n    \"npx\",\n    \"jscodeshift\",\n    \"-t\",\n    codemodPath,\n    ...targetFiles,\n    \"--parser\",\n    \"tsx\",\n  ];\n\n  if (options.dry) {\n    command.push(\"--dry\");\n  }\n\n  if (options.print) {\n    command.push(\"--print\");\n  }\n\n  if (options.verbose) {\n    command.push(\"--verbose\");\n  }\n\n  if (options.jscodeshift) {\n    command.push(options.jscodeshift);\n  }\n\n  return command;\n}\n\nexport type TransformErrors = {\n  transform: string;\n  filename: string;\n  summary: string;\n}[];\n\nfunction parseErrors(transform: string, output: string): TransformErrors {\n  const errors: TransformErrors = [];\n  const errorRegex = /ERR (.+) Transformation error/g;\n  const syntaxErrorRegex = /SyntaxError: .+/g;\n\n  let match;\n  while ((match = errorRegex.exec(output)) !== null) {\n    const filename = match[1]!;\n    const syntaxErrorMatch = syntaxErrorRegex.exec(output);\n    if (syntaxErrorMatch) {\n      const summary = syntaxErrorMatch[0];\n      errors.push({ transform, filename, summary });\n    }\n  }\n\n  return errors;\n}\n\nexport function transform(\n  codemod: string,\n  source: string,\n  transformOptions: TransformOptions,\n  options: {\n    logStatus: boolean;\n    onProgress?: (processedFiles: number) => void;\n    relevantFiles?: string[];\n  } = { logStatus: true },\n): TransformErrors {\n  if (options.logStatus) {\n    log(`Applying codemod '${codemod}': ${source}`);\n  }\n  const codemodPath = path.resolve(__dirname, `../codemods/${codemod}.js`);\n\n  // Use pre-computed relevant files if provided, otherwise get them\n  const targetFiles = options.relevantFiles || getRelevantFiles(source);\n\n  if (targetFiles.length === 0) {\n    log(`No relevant files found for codemod '${codemod}'`);\n    return [];\n  }\n\n  log(`Found ${targetFiles.length} relevant files for codemod '${codemod}'`);\n\n  const command = buildCommand(codemodPath, targetFiles, transformOptions);\n\n  // Use spawn instead of execFileSync to capture output in real-time\n  if (options.onProgress) {\n    const result = spawnSync(command[0]!, command.slice(1), {\n      encoding: \"utf8\",\n      stdio: [\"ignore\", \"pipe\", \"pipe\"],\n    });\n\n    const stdout = result.stdout || \"\";\n\n    // Count the number of processed files from the output\n    const processedFiles = (stdout.match(/Processing file/g) || []).length;\n    if (options.onProgress) {\n      options.onProgress(processedFiles);\n    }\n\n    const errors = parseErrors(codemod, stdout);\n    if (options.logStatus && errors.length > 0) {\n      errors.forEach(({ transform, filename, summary }) => {\n        error(\n          `Error applying codemod [codemod=${transform}, path=${filename}, summary=${summary}]`,\n        );\n      });\n    }\n    return errors;\n  } else {\n    // Use the original synchronous approach if no progress callback\n    const stdout = execFileSync(command[0]!, command.slice(1), {\n      encoding: \"utf8\",\n      stdio: \"pipe\",\n    });\n    const errors = parseErrors(codemod, stdout);\n    if (options.logStatus && errors.length > 0) {\n      errors.forEach(({ transform, filename, summary }) => {\n        error(\n          `Error applying codemod [codemod=${transform}, path=${filename}, summary=${summary}]`,\n        );\n      });\n    }\n    return errors;\n  }\n}\n"],"mappings":"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","names":["transform"]}