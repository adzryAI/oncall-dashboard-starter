// src/codemods/v0-9/edge-package-split.ts
import { createTransformer } from "../utils/createTransformer.js";
var reactAiSdkExports = [
  // Chat Runtime (replaces edge runtime)
  "useChatRuntime",
  // Core Types
  "CoreMessage",
  "CoreUserMessage",
  "CoreAssistantMessage",
  "CoreSystemMessage",
  "CoreUserMessagePart",
  "CoreAssistantMessagePart",
  "CoreToolCallMessagePart",
  // Core message converters
  "fromCoreMessages",
  "fromCoreMessage",
  "toCoreMessages",
  "toCoreMessage",
  // Language model converters
  "toLanguageModelMessages",
  "toLanguageModelTools",
  "fromLanguageModelMessages",
  "fromLanguageModelTools",
  "useDangerousInBrowserRuntime"
];
var migrateToEdgePackage = createTransformer(({ j, root, markAsChanged }) => {
  const sourcesToMigrate = ["@assistant-ui/react"];
  const movedAiSdkSpecifiers = [];
  let lastMigratedImportPath = null;
  root.find(j.ImportDeclaration).filter((path) => sourcesToMigrate.includes(path.value.source.value)).forEach((path) => {
    let hadMigratedSpecifiers = false;
    const remainingSpecifiers = [];
    path.value.specifiers.forEach((specifier) => {
      if (j.ImportSpecifier.check(specifier) && reactAiSdkExports.includes(specifier.imported.name)) {
        movedAiSdkSpecifiers.push(specifier);
        hadMigratedSpecifiers = true;
      } else {
        remainingSpecifiers.push(specifier);
      }
    });
    if (hadMigratedSpecifiers) {
      lastMigratedImportPath = path;
    }
    if (remainingSpecifiers.length === 0) {
      j(path).remove();
      markAsChanged();
    } else if (remainingSpecifiers.length !== path.value.specifiers.length) {
      path.value.specifiers = remainingSpecifiers;
      markAsChanged();
    }
  });
  if (movedAiSdkSpecifiers.length > 0) {
    const existingAiSdkImport = root.find(j.ImportDeclaration, {
      source: { value: "@assistant-ui/react-ai-sdk" }
    });
    if (existingAiSdkImport.size() > 0) {
      existingAiSdkImport.forEach((path) => {
        movedAiSdkSpecifiers.forEach((specifier) => {
          if (!path.value.specifiers.some(
            (s) => s.imported.name === specifier.imported.name
          )) {
            path.value.specifiers.push(specifier);
          }
        });
      });
    } else {
      const newImport = j.importDeclaration(
        movedAiSdkSpecifiers,
        j.literal("@assistant-ui/react-ai-sdk")
      );
      if (lastMigratedImportPath) {
        j(lastMigratedImportPath).insertAfter(newImport);
      } else {
        const firstImport = root.find(j.ImportDeclaration).at(0);
        if (firstImport.size() > 0) {
          firstImport.insertBefore(newImport);
        } else {
          root.get().node.program.body.unshift(newImport);
        }
      }
    }
    markAsChanged();
  }
  root.find(j.ImportDeclaration).forEach((path) => {
    const sourceValue = path.value.source.value;
    if (sourceValue.startsWith("@assistant-ui/react/") && (sourceValue.includes("edge/") || sourceValue.includes("dangerous-in-browser/"))) {
      path.value.source = j.literal(
        sourceValue.replace(
          "@assistant-ui/react/",
          "@assistant-ui/react-ai-sdk/"
        )
      );
      markAsChanged();
    }
  });
  root.find(j.ImportDeclaration).forEach((path) => {
    const sourceValue = path.value.source.value;
    if (sourceValue === "@assistant-ui/react-edge" || sourceValue === "@assistant-ui/react") {
      let hasLanguageModelConverters = false;
      const remainingSpecifiers = [];
      const aiSdkSpecifiers = [];
      path.value.specifiers.forEach((specifier) => {
        if (j.ImportSpecifier.check(specifier) && reactAiSdkExports.includes(specifier.imported.name)) {
          aiSdkSpecifiers.push(specifier);
          hasLanguageModelConverters = true;
        } else {
          remainingSpecifiers.push(specifier);
        }
      });
      if (hasLanguageModelConverters) {
        if (remainingSpecifiers.length === 0) {
          j(path).remove();
        } else {
          path.value.specifiers = remainingSpecifiers;
        }
        const existingAiSdkImport = root.find(j.ImportDeclaration, {
          source: { value: "@assistant-ui/react-ai-sdk" }
        });
        if (existingAiSdkImport.size() > 0) {
          existingAiSdkImport.forEach((importPath) => {
            aiSdkSpecifiers.forEach((specifier) => {
              if (!importPath.value.specifiers.some(
                (s) => s.imported.name === specifier.imported.name
              )) {
                importPath.value.specifiers.push(specifier);
              }
            });
          });
        } else {
          const newImport = j.importDeclaration(
            aiSdkSpecifiers,
            j.literal("@assistant-ui/react-ai-sdk")
          );
          j(path).insertAfter(newImport);
        }
        markAsChanged();
      }
    }
  });
});
var edge_package_split_default = migrateToEdgePackage;
export {
  edge_package_split_default as default
};
//# sourceMappingURL=edge-package-split.js.map