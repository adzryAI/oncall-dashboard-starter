{"version":3,"sources":["../../../src/codemods/v0-11/content-part-to-message-part.ts"],"sourcesContent":["import { createTransformer } from \"../utils/createTransformer\";\n\n// Map of old ContentPart names to new MessagePart names\nconst typeRenamingMap: Record<string, string> = {\n  // Core types\n  TextContentPart: \"TextMessagePart\",\n  ReasoningContentPart: \"ReasoningMessagePart\",\n  SourceContentPart: \"SourceMessagePart\",\n  ImageContentPart: \"ImageMessagePart\",\n  FileContentPart: \"FileMessagePart\",\n  Unstable_AudioContentPart: \"Unstable_AudioMessagePart\",\n  ToolCallContentPart: \"ToolCallMessagePart\",\n\n  // Status types\n  ContentPartStatus: \"MessagePartStatus\",\n  ToolCallContentPartStatus: \"ToolCallMessagePartStatus\",\n\n  // Thread message parts\n  ThreadUserContentPart: \"ThreadUserMessagePart\",\n  ThreadAssistantContentPart: \"ThreadAssistantMessagePart\",\n\n  // Runtime and state types\n  ContentPartRuntime: \"MessagePartRuntime\",\n  ContentPartState: \"MessagePartState\",\n\n  // Component types\n  EmptyContentPartComponent: \"EmptyMessagePartComponent\",\n  TextContentPartComponent: \"TextMessagePartComponent\",\n  ReasoningContentPartComponent: \"ReasoningMessagePartComponent\",\n  SourceContentPartComponent: \"SourceMessagePartComponent\",\n  ImageContentPartComponent: \"ImageMessagePartComponent\",\n  FileContentPartComponent: \"FileMessagePartComponent\",\n  Unstable_AudioContentPartComponent: \"Unstable_AudioMessagePartComponent\",\n  ToolCallContentPartComponent: \"ToolCallMessagePartComponent\",\n\n  // Props types\n  EmptyContentPartProps: \"EmptyMessagePartProps\",\n  TextContentPartProps: \"TextMessagePartProps\",\n  ReasoningContentPartProps: \"ReasoningMessagePartProps\",\n  SourceContentPartProps: \"SourceMessagePartProps\",\n  ImageContentPartProps: \"ImageMessagePartProps\",\n  FileContentPartProps: \"FileMessagePartProps\",\n  Unstable_AudioContentPartProps: \"Unstable_AudioMessagePartProps\",\n  ToolCallContentPartProps: \"ToolCallMessagePartProps\",\n\n  // Provider types\n  TextContentPartProvider: \"TextMessagePartProvider\",\n  TextContentPartProviderProps: \"TextMessagePartProviderProps\",\n  ContentPartRuntimeProvider: \"MessagePartRuntimeProvider\",\n\n  // Context types\n  ContentPartContext: \"MessagePartContext\",\n  ContentPartContextValue: \"MessagePartContextValue\",\n\n  // Hook names\n  useContentPart: \"useMessagePart\",\n  useContentPartRuntime: \"useMessagePartRuntime\",\n  useContentPartText: \"useMessagePartText\",\n  useContentPartReasoning: \"useMessagePartReasoning\",\n  useContentPartSource: \"useMessagePartSource\",\n  useContentPartFile: \"useMessagePartFile\",\n  useContentPartImage: \"useMessagePartImage\",\n  useTextContentPart: \"useTextMessagePart\",\n\n  // Primitive names\n  ContentPartPrimitive: \"MessagePartPrimitive\",\n  ContentPartPrimitiveText: \"MessagePartPrimitiveText\",\n  ContentPartPrimitiveImage: \"MessagePartPrimitiveImage\",\n  ContentPartPrimitiveInProgress: \"MessagePartPrimitiveInProgress\",\n};\n\nconst migrateContentPartToMessagePart = createTransformer(\n  ({ j, root, markAsChanged }) => {\n    // 1. Update imports\n    root.find(j.ImportDeclaration).forEach((path: any) => {\n      const source = path.value.source.value;\n\n      // Only process imports from @assistant-ui packages\n      if (typeof source === \"string\" && source.startsWith(\"@assistant-ui/\")) {\n        path.value.specifiers?.forEach((specifier: any) => {\n          if (j.ImportSpecifier.check(specifier)) {\n            const oldName = specifier.imported.name as string;\n            if (typeRenamingMap[oldName]) {\n              specifier.imported.name = typeRenamingMap[oldName];\n              if (specifier.local && specifier.local.name === oldName) {\n                specifier.local.name = typeRenamingMap[oldName];\n              }\n              markAsChanged();\n            }\n          }\n        });\n      }\n    });\n\n    // 2. Update MessagePrimitive.Content to MessagePrimitive.Parts\n    root.find(j.MemberExpression).forEach((path: any) => {\n      if (\n        path.value.object &&\n        path.value.object.name === \"MessagePrimitive\" &&\n        path.value.property &&\n        path.value.property.name === \"Content\"\n      ) {\n        path.value.property.name = \"Parts\";\n        markAsChanged();\n      }\n    });\n\n    // 3. Update JSX member expressions (e.g., MessagePrimitive.Content in JSX)\n    root.find(j.JSXMemberExpression).forEach((path: any) => {\n      if (\n        path.value.object &&\n        path.value.object.name === \"MessagePrimitive\" &&\n        path.value.property &&\n        path.value.property.name === \"Content\"\n      ) {\n        path.value.property.name = \"Parts\";\n        markAsChanged();\n      }\n    });\n\n    // 4. Update all identifiers for types, hooks, and primitives\n    Object.entries(typeRenamingMap).forEach(([oldName, newName]) => {\n      // Update type references\n      root.find(j.TSTypeReference).forEach((path: any) => {\n        if (path.value.typeName && path.value.typeName.name === oldName) {\n          path.value.typeName.name = newName;\n          markAsChanged();\n        }\n      });\n\n      // Update identifier references\n      root.find(j.Identifier).forEach((path: any) => {\n        if (path.value.name === oldName) {\n          // Skip if this is part of an import declaration (already handled above)\n          if (j.ImportSpecifier.check(path.parent.value)) {\n            return;\n          }\n\n          // Skip if this is a property key in an object\n          if (\n            j.Property.check(path.parent.value) &&\n            path.parent.value.key === path.value\n          ) {\n            return;\n          }\n\n          // Skip if this is a property in a member expression\n          if (\n            j.MemberExpression.check(path.parent.value) &&\n            path.parent.value.property === path.value\n          ) {\n            return;\n          }\n\n          path.value.name = newName;\n          markAsChanged();\n        }\n      });\n\n      // Update JSX element names\n      root.find(j.JSXIdentifier).forEach((path: any) => {\n        if (path.value.name === oldName) {\n          path.value.name = newName;\n          markAsChanged();\n        }\n      });\n    });\n  },\n);\n\nexport default migrateContentPartToMessagePart;\n"],"mappings":"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","names":[]}