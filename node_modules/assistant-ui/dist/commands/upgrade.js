// src/commands/upgrade.ts
import { Command } from "commander";
import { transform } from "../lib/transform.js";
import { upgrade } from "../lib/upgrade.js";
import debug from "debug";
var error = debug("codemod:error");
debug.enable("codemod:*");
var addTransformOptions = (command) => {
  return command.option("-d, --dry", "Dry run (no changes are made to files)").option("-p, --print", "Print transformed files to stdout").option("--verbose", "Show more information about the transform process").option(
    "-j, --jscodeshift <options>",
    "Pass options directly to jscodeshift"
  );
};
var codemodCommand = addTransformOptions(
  new Command().name("codemod").description("CLI tool for running codemods").argument("<codemod>", "Codemod to run (e.g., rewrite-framework-imports)").argument("<source>", "Path to source files or directory to transform")
).action((codemod, source, options) => {
  try {
    transform(codemod, source, options);
  } catch (err) {
    error(`Error transforming: ${err}`);
    error(err.stack);
    process.exit(1);
  }
});
var upgradeCommand = addTransformOptions(
  new Command().command("upgrade").description("Upgrade ai package dependencies and apply codemods")
).action((options) => {
  try {
    upgrade(options);
  } catch (err) {
    error(`Error upgrading: ${err}`);
    error(err.stack);
    process.exit(1);
  }
});
export {
  codemodCommand,
  upgradeCommand
};
//# sourceMappingURL=upgrade.js.map