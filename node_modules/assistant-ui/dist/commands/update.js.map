{"version":3,"sources":["../../src/commands/update.ts"],"sourcesContent":["import { Command } from \"commander\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport chalk from \"chalk\";\nimport { detect } from \"detect-package-manager\";\nimport { sync as spawnSync } from \"cross-spawn\";\n\nexport const update = new Command()\n  .name(\"update\")\n  .description(\n    \"Update all '@assistant-ui/*' and 'assistant-*' packages in package.json to latest versions using your package manager.\",\n  )\n  .option(\"--dry\", \"Print the package manager command instead of running it.\")\n  .action(async (opts) => {\n    const packageJsonPath = path.join(process.cwd(), \"package.json\");\n    if (!fs.existsSync(packageJsonPath)) {\n      console.error(\n        chalk.red(\"No package.json found in the current directory.\"),\n      );\n      process.exit(1);\n    }\n    const pkg = JSON.parse(fs.readFileSync(packageJsonPath, \"utf-8\"));\n    const sections = [\"dependencies\", \"devDependencies\"];\n    const targets: string[] = [];\n    for (const section of sections) {\n      if (!pkg[section]) continue;\n      for (const dep in pkg[section]) {\n        if (\n          dep.startsWith(\"@assistant-ui/\") ||\n          dep === \"assistant-stream\" ||\n          dep === \"assistant-cloud\"\n        ) {\n          targets.push(dep);\n        }\n      }\n    }\n    if (!targets.length) {\n      console.log(chalk.yellow(\"No matching packages found to update.\"));\n      return;\n    }\n    const pm = await detect({ cwd: process.cwd() });\n    let cmd: string;\n    if (pm === \"yarn\") {\n      cmd = `yarn add ${targets.map((d) => `${d}@latest`).join(\" \")}`;\n    } else if (pm === \"pnpm\") {\n      cmd = `pnpm add ${targets.map((d) => `${d}@latest`).join(\" \")}`;\n    } else if (pm === \"bun\") {\n      cmd = `bun add ${targets.map((d) => `${d}@latest`).join(\" \")}`;\n    } else {\n      cmd = `npm install ${targets.map((d) => `${d}@latest`).join(\" \")}`;\n    }\n    if (opts.dry) {\n      console.log(chalk.blue(\"\\nDry run: would run the following command:\"));\n      console.log(cmd);\n      return;\n    }\n    console.log(chalk.blue(`\\nRunning: ${cmd}`));\n    const result = spawnSync(cmd, { shell: true, stdio: \"inherit\" });\n    if (result.status !== 0) {\n      console.error(chalk.red(\"Package manager update failed.\"));\n      process.exit(result.status || 1);\n    }\n    console.log(chalk.green(\"\\nAll packages updated to latest version!\"));\n  });\n"],"mappings":";AAAA,SAAS,eAAe;AACxB,OAAO,QAAQ;AACf,OAAO,UAAU;AACjB,OAAO,WAAW;AAClB,SAAS,cAAc;AACvB,SAAS,QAAQ,iBAAiB;AAE3B,IAAM,SAAS,IAAI,QAAQ,EAC/B,KAAK,QAAQ,EACb;AAAA,EACC;AACF,EACC,OAAO,SAAS,0DAA0D,EAC1E,OAAO,OAAO,SAAS;AACtB,QAAM,kBAAkB,KAAK,KAAK,QAAQ,IAAI,GAAG,cAAc;AAC/D,MAAI,CAAC,GAAG,WAAW,eAAe,GAAG;AACnC,YAAQ;AAAA,MACN,MAAM,IAAI,iDAAiD;AAAA,IAC7D;AACA,YAAQ,KAAK,CAAC;AAAA,EAChB;AACA,QAAM,MAAM,KAAK,MAAM,GAAG,aAAa,iBAAiB,OAAO,CAAC;AAChE,QAAM,WAAW,CAAC,gBAAgB,iBAAiB;AACnD,QAAM,UAAoB,CAAC;AAC3B,aAAW,WAAW,UAAU;AAC9B,QAAI,CAAC,IAAI,OAAO,EAAG;AACnB,eAAW,OAAO,IAAI,OAAO,GAAG;AAC9B,UACE,IAAI,WAAW,gBAAgB,KAC/B,QAAQ,sBACR,QAAQ,mBACR;AACA,gBAAQ,KAAK,GAAG;AAAA,MAClB;AAAA,IACF;AAAA,EACF;AACA,MAAI,CAAC,QAAQ,QAAQ;AACnB,YAAQ,IAAI,MAAM,OAAO,uCAAuC,CAAC;AACjE;AAAA,EACF;AACA,QAAM,KAAK,MAAM,OAAO,EAAE,KAAK,QAAQ,IAAI,EAAE,CAAC;AAC9C,MAAI;AACJ,MAAI,OAAO,QAAQ;AACjB,UAAM,YAAY,QAAQ,IAAI,CAAC,MAAM,GAAG,CAAC,SAAS,EAAE,KAAK,GAAG,CAAC;AAAA,EAC/D,WAAW,OAAO,QAAQ;AACxB,UAAM,YAAY,QAAQ,IAAI,CAAC,MAAM,GAAG,CAAC,SAAS,EAAE,KAAK,GAAG,CAAC;AAAA,EAC/D,WAAW,OAAO,OAAO;AACvB,UAAM,WAAW,QAAQ,IAAI,CAAC,MAAM,GAAG,CAAC,SAAS,EAAE,KAAK,GAAG,CAAC;AAAA,EAC9D,OAAO;AACL,UAAM,eAAe,QAAQ,IAAI,CAAC,MAAM,GAAG,CAAC,SAAS,EAAE,KAAK,GAAG,CAAC;AAAA,EAClE;AACA,MAAI,KAAK,KAAK;AACZ,YAAQ,IAAI,MAAM,KAAK,6CAA6C,CAAC;AACrE,YAAQ,IAAI,GAAG;AACf;AAAA,EACF;AACA,UAAQ,IAAI,MAAM,KAAK;AAAA,WAAc,GAAG,EAAE,CAAC;AAC3C,QAAM,SAAS,UAAU,KAAK,EAAE,OAAO,MAAM,OAAO,UAAU,CAAC;AAC/D,MAAI,OAAO,WAAW,GAAG;AACvB,YAAQ,MAAM,MAAM,IAAI,gCAAgC,CAAC;AACzD,YAAQ,KAAK,OAAO,UAAU,CAAC;AAAA,EACjC;AACA,UAAQ,IAAI,MAAM,MAAM,2CAA2C,CAAC;AACtE,CAAC;","names":[]}